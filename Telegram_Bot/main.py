#       https://t.me/YourBotUsername?start=unique_code
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command
import logging
import asyncio
import sqlite3
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
# –≠–∫–∑–µ–º–ø–ª—è—Ä
BOT_TOKEN = "7307411243:AAFkaFIMOuh70njhnwUPki_OkBbdl5-SqWc"

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ê–¥–º–∏–Ω
admin_username = "Artemiy_Chernakov"
# –ò–º—è –±–æ—Ç–∞
bot_username = "Mentoring_for_juns_bot"

start_message2 = "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–∂—É–Ω–æ–≤ –∏ –º–µ–Ω—Ç–æ—Ä–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–∞–Ω–¥—ã. –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –ú–µ–Ω—Ç–æ—Ä–∏–Ω–≥ –±–æ—Ç —Å—Ç–∞–Ω–µ—Ç –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ–Ω—Ç–æ—Ä–∏–Ω–≥–∞!"
message_for_jun = "üß≠ –ù–∞–π–¥–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å. –ú–µ–Ω—Ç–æ—Ä–∏–Ω–≥ –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º —Ç—Ä–µ–∫–µ, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —ç—Ç–∞–ø—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"
message_for_mentr = "üöÄ –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —É—Å–ø–µ—Ö–∞. –ú–µ–Ω—Ç–æ—Ä–∏–Ω–≥ –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –¥–∂—É–Ω–æ–≤. –î–æ–±–∞–≤–ª—è–π—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–∞–∑–Ω–∞—á–∞–π—Ç–µ –∑–∞–¥–∞—á–∏, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"
welcome_mentor_message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ú–µ–Ω—Ç–æ—Ä! –¢–µ–ø–µ—Ä—å –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥—ã –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"
ground_of_jun = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏ –∫–æ–¥ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–∑–¥–∞–ª –¥–ª—è —Ç–µ–±—è —Ç–≤–æ–π –º–µ–Ω—Ç–æ—Ä"
messafe_about_of_bot  = "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–∂—É–Ω–æ–≤ –∏ –º–µ–Ω—Ç–æ—Ä–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–∞–Ω–¥—ã. \n  –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –ú–µ–Ω—Ç–æ—Ä–∏–Ω–≥ –±–æ—Ç —Å—Ç–∞–Ω–µ—Ç –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ–Ω—Ç–æ—Ä–∏–Ω–≥–∞!"
logging.basicConfig(level=logging.INFO)

# --------- DB------

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω)
conn = sqlite3.connect('mentoring_bot.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã Juns
cursor.execute('''
CREATE TABLE IF NOT EXISTS Juns (
    user_jun TEXT PRIMARY KEY,
    users_mentr TEXT,
    about_yourself TEXT,
    progress TEXT,
    zadachi TEXT,
    FOREIGN KEY (users_mentr) REFERENCES Mntrs(mentrs_username)
)
''')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã Mntrs
cursor.execute('''
CREATE TABLE IF NOT EXISTS Mntrs (
    mentrs_username TEXT NOT NULL,
    about_of_mentr TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS workspace (
    workspace_name TEXT,
    workspace_ssilki TEXT,
    workspace_code INT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS baza_znanie (
    baza_znanie_name TEXT,
    baza_znanie_ssilki TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS admin (
    admin_username TEXT
)
''')

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
conn.commit()
conn.close()

print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.")

# ---------- DB ------

#------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É Mntrs ------

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('mentoring_bot.db')
cursor = conn.cursor()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class AddMentrStates(StatesGroup):
    waiting_for_username = State()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—Ç—Ä–æ–≤
async def add_mentr(message: types.Message, state: FSMContext):
    if message.from_user.username == admin_username:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ username –º–µ–Ω—Ç–æ—Ä–∞")
        await state.set_state(AddMentrStates.waiting_for_username)
    else:
        await message.answer(message.from_user.username)
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
def get_all_admins():
    cursor.execute('''
    SELECT admin_username FROM admin
    ''')
    rows = cursor.fetchall()
    return [row[0] for row in rows]

class AddAdminStates(StatesGroup):
    waiting_for_admin_username = State()

async def add_admin(message: types.Message, state: FSMContext):
    admins = get_all_admins()
    if message.from_user.username == admin_username or message.from_user.username in admins:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ username –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:")
        await state.set_state(AddAdminStates.waiting_for_admin_username)
    else:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω")

async def process_admin_username(message: types.Message, state: FSMContext):
    new_admin_username = message.text
    new_admin_username = new_admin_username.replace("@", "")
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('''
    INSERT INTO admin (admin_username) VALUES (?)
    ''', (new_admin_username,))
    conn.commit()

    await message.answer(f"–ê–¥–º–∏–Ω {new_admin_username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    await state.clear()

async def get_admins(message: types.Message):
    admins = get_all_admins()
    await message.answer(f"–ê–¥–º–∏–Ω—ã:\n {admins}")

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
async def process_username(message: types.Message, state: FSMContext):
    username = message.text
    username = username.replace("@", "")
    cursor.execute('''
    INSERT INTO Mntrs (mentrs_username) VALUES (?)
    ''', (username,))
    conn.commit()
    await message.answer(f"–ú–µ–Ω—Ç–æ—Ä {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    await state.clear()

async def is_mentor (user_id: int)->bool:
    cursor.execute('''
    SELECT * FROM Mntrs WHERE mentrs_username = ?
    ''', (user_id,))
    return cursor.fetchone() is not None

async def is_jun (user_id: int)->bool:
    cursor.execute('''
    SELECT * FROM Juns WHERE user_jun = ?
    ''', (user_id,))
    return cursor.fetchone() is not None

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∂—É–Ω–∞
async def add_jun(message: types.Message, ssilka: str):
    username = message.from_user.username
    cursor.execute('''
    INSERT INTO Juns (user_jun, users_mentr) VALUES (?, ?)
    ''', (username, ssilka))
    conn.commit()
    await message.answer(f"–î–∂—É–Ω {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–µ–Ω—Ç–æ—Ä–æ–≤
async def get_all_mentors()-> list:
    cursor.execute('''
    SELECT * FROM Mntrs
    ''')
    mentors = cursor.fetchall()
    return [mentor[0] for mentor in mentors]

async def get_all_juns()-> list:
    cursor.execute('''
    SELECT * FROM Juns
    ''')
    juns = cursor.fetchall()
    return [jun[0] for jun in juns]

async def handler_start(message: types.Message, command: CommandStart):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ start
    unique_code = command.args
    logging.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥:{unique_code}")
    mentors = await get_all_mentors()
    juns = await get_all_juns()

    if (unique_code and unique_code in mentors) or (message.from_user.username in mentors) or (message.from_user.username in juns):
        await message.answer(text=f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å –∫–æ–¥–æ–º: {unique_code}")
        row = []
        if await is_mentor(message.from_user.username):
            await message.answer(text="–í—ã –º–µ–Ω—Ç–æ—Ä")
            
            tg_channel_btn2 = InlineKeyboardButton(
            text="–î–∞–ª–µ–µ",
            callback_data='mentor',
            )
            row.append(tg_channel_btn2)
        else:
            if await is_jun(message.from_user.username) == False:
                await message.answer("–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                await add_jun(message, unique_code)

            await message.answer(text="–í—ã –¥–∂—É–Ω")
            tg_channel_btn = InlineKeyboardButton(
            text="–î–∞–ª–µ–µ",
            callback_data='jun',
            )
            row.append(tg_channel_btn)
        
        rows = [row]
        markup = InlineKeyboardMarkup(inline_keyboard=rows)
        await message.answer(
            text=start_message2,
            reply_markup=markup,
        )
    else:
        await message.answer(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.", reply_markup=ReplyKeyboardRemove())
# --------------------------–ö–æ–Ω–µ—Ü –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏    
        

async def handler_ment(callback_query: CallbackQuery):
    continue_btn = InlineKeyboardButton(
        text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
        callback_data='continue_mentor',
    )
    markup = InlineKeyboardMarkup(inline_keyboard=[[continue_btn]])
    await callback_query.message.answer(message_for_mentr, reply_markup=markup)
    await callback_query.message.delete()  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback_query.answer()


async def handler_jun(callback_query: CallbackQuery):
    continue_btn = InlineKeyboardButton(
        text="–î–∞–ª–µ–µ",
        callback_data='continue_jun',
    )
    markup = InlineKeyboardMarkup(inline_keyboard=[[continue_btn]])
    await callback_query.message.answer(message_for_jun, reply_markup=markup)
    await callback_query.message.delete()  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback_query.answer()

# ------------------------------------------------------------------------------
# –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ú–µ–Ω—Ç–æ—Ä–∞

async def handler_continue_callback_mentor(callback_query: CallbackQuery):
    begin_button = InlineKeyboardButton(
        text="–ù–∞—á–∞—Ç—å",
        callback_data='begin_mentor',
    )
    markup = InlineKeyboardMarkup(inline_keyboard=[[ begin_button]])
    await callback_query.message.answer(welcome_mentor_message, reply_markup=markup)
    await callback_query.message.delete()
    await callback_query.answer()

async def handler_begin_mentor(callback_query: CallbackQuery):

    workspace_btn = KeyboardButton(
        text="–†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ"
    )
    ground_of_command_btn = KeyboardButton(
        text="–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥—ã"
    )
    my_juns_btn = KeyboardButton(
        text="–ú–æ–∏ –¥–∂—É–Ω—ã"
    )
    baza_znanie_btn = KeyboardButton(
        text="–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"
    )
    my_profile_btn = KeyboardButton(
        text="–ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å"
    )
    about_of_bot_btn = KeyboardButton(
        text="–û –ë–æ—Ç–µ"
    )
    
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [workspace_btn],
            [ground_of_command_btn],
            [my_juns_btn],
            [baza_znanie_btn],
            [my_profile_btn],
            [about_of_bot_btn],
        ],
        resize_keyboard=True
    )

    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é", reply_markup=markup)
    await callback_query.message.delete()
    await callback_query.answer()

async def handler_about_of_bot2(message: types.Message):
    continue_btn = InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data='begin_mentor',
    )
    await message.answer("–û –±–æ—Ç–µ", reply_markup=ReplyKeyboardRemove())
    markup = InlineKeyboardMarkup(inline_keyboard=[[continue_btn]])
    await message.answer(messafe_about_of_bot, reply_markup=markup)


# ---------------------–ü—Ä–æ—Ñ–∏–ª—å –º–µ–Ω—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ---------------
async def handler_my_profile_mentor(message: types.Message):
    back_btn = InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data='begin_mentor',
    )
    edit_btn = InlineKeyboardButton(
        text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
        callback_data='edit_profile_mentor',
    )
    cursor.execute('''
    SELECT about_of_mentr FROM Mntrs WHERE mentrs_username = ?
    ''', (message.from_user.username,))
    result = cursor.fetchone()
    
    if result:
        about_of_mentr = result[0]
        profile_text = about_of_mentr
    else:
        profile_text = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

    await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=ReplyKeyboardRemove())
    markup = InlineKeyboardMarkup(inline_keyboard=[[back_btn, edit_btn]])
    await message.answer(profile_text, reply_markup=markup)

class EditProfileStates(StatesGroup):
    waiting_for_new_profile_text = State()
async def edit_profile_handler(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è:")
    await state.set_state(EditProfileStates.waiting_for_new_profile_text)
    await callback_query.answer()
async def process_new_profile_text(message: types.Message, state: FSMContext):
    new_profile_text = message.text
    username = message.from_user.username

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('''
    UPDATE Mntrs SET about_of_mentr = ? WHERE mentrs_username = ?
    ''', (new_profile_text, username))
    conn.commit()

    await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    await state.clear()

# ---------------------–ö–æ–Ω–µ—Ü –ü—Ä–æ—Ñ–∏–ª—è –º–µ–Ω—Ç—Ä–∞----------------------------


# ---------------------–ë–∞–∑–∞ –ó–Ω–∞–Ω–∏–π ---------------------

class AddBazaZnanieStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_link = State()

async def baza_znanie_mentor(message: types.Message):
    back_btn = InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data='begin_mentor',
    )
    add_btn = InlineKeyboardButton(
        text="–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É",
        callback_data='add_baza_znanie',
    )
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã baza_znanie
    cursor.execute('''
    SELECT baza_znanie_name, baza_znanie_ssilki FROM baza_znanie
    ''')
    rows = cursor.fetchall()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
    buttons = []
    for row in rows:
        name, link = row
        buttons.append([InlineKeyboardButton(text=name, url=link)])
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    buttons.append([back_btn])
    buttons.append([add_btn])
    
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.answer("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", reply_markup=ReplyKeyboardRemove()) 
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:", reply_markup=markup)

async def add_baza_znanie_handler(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏:")
    await state.set_state(AddBazaZnanieStates.waiting_for_name)
    await callback_query.answer()

async def process_baza_znanie_name(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(baza_znanie_name=name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏:")
    await state.set_state(AddBazaZnanieStates.waiting_for_link)

async def process_baza_znanie_link(message: types.Message, state: FSMContext):
    back_btn = InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data='begin_mentor',
    )
    markup = InlineKeyboardMarkup(inline_keyboard=[[back_btn]])
    link = message.text
    user_data = await state.get_data()
    name = user_data['baza_znanie_name']

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('''
    INSERT INTO baza_znanie (baza_znanie_name, baza_znanie_ssilki) VALUES (?, ?)
    ''', (name, link))
    conn.commit()

    await message.answer("–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=markup)
    await state.clear()
# ---------------- –ö–æ–Ω–µ—Ü –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π----------------------------------

# -----------------–¥–∂—É–Ω—ã –º–µ–Ω—Ç—Ä–∞----------------
async def juns_mentora(message: types.Message):
    back_btn = InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data='begin_mentor',
    )
    add_jun_btn = KeyboardButton(
        text="–î–æ–±–∞–≤–∏—Ç—å –¥–∂—É–Ω–∞",
        callback_data='add_jun_ssilka',
    )
    username_mentor = message.from_user.username.replace("@", "")
    juns = await get_juns_by_mentor(username_mentor)
    keyboard = [[back_btn]]
    
    for jun in juns:
        keyboard.append([InlineKeyboardButton(text=f"@{jun}", callback_data=f'jun_info_{jun}')])
    await message.answer("–ú–æ–∏ –¥–∂—É–Ω—ã", reply_markup=ReplyKeyboardRemove()) 

    keyboard_reply = ReplyKeyboardMarkup(keyboard=[[add_jun_btn]], resize_keyboard=True)
    await message.answer("–î–æ–±–∞–≤–∏—Ç—å –¥–∂—É–Ω–∞?", reply_markup=keyboard_reply)

    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∂—É–Ω–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π", reply_markup=markup)
    

async def jun_info_handler(callback_query: CallbackQuery):
    jun_username = callback_query.data.split('_')[2]
    actions_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", callback_data=f'view_progress_{jun_username}')],
        [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏", callback_data=f'view_tasks_{jun_username}')],
        [InlineKeyboardButton(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f'assign_task_{jun_username}')],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='begin_mentor')]
    ])
    await callback_query.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è @{jun_username}", reply_markup=actions_keyboard)
    await callback_query.answer()

async def view_progress_handler(callback_query: CallbackQuery):
    jun_username = callback_query.data.split('_')[2]
    # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–∂—É–Ω–∞
    cursor.execute('''
    SELECT progress FROM Juns WHERE user_jun = ?
    ''', (jun_username,))
    result = cursor.fetchone()
    progress = result[0] if result else "–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"

    await callback_query.message.answer(f"–ü—Ä–æ–≥—Ä–µ—Å—Å @{jun_username}: {progress}")
    await callback_query.answer()

async def view_tasks_handler(callback_query: CallbackQuery):
    jun_username = callback_query.data.split('_')[2]
    # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á –¥–∂—É–Ω–∞
    cursor.execute('''
    SELECT zadachi FROM Juns WHERE user_jun = ?
    ''', (jun_username,))
    result = cursor.fetchone()
    tasks = result[0] if result else "–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    await callback_query.message.answer(f"–ó–∞–¥–∞—á–∏ @{jun_username}:\n{tasks}")
    await callback_query.answer()

# --------------------------------------------–ù–∞–∑–Ω–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class AssignTaskStates(StatesGroup):
    waiting_for_task = State()

async def assign_task_handler(callback_query: CallbackQuery, state: FSMContext):
    jun_username = callback_query.data.split('_')[2]
    await callback_query.message.answer(f"–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è @{jun_username}. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    await state.update_data(jun_username=jun_username)
    await state.set_state(AssignTaskStates.waiting_for_task)
    await callback_query.answer()

async def process_task_text(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    jun_username = user_data['jun_username']
    task_text = message.text

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á
    cursor.execute('''
    SELECT zadachi FROM Juns WHERE user_jun = ?
    ''', (jun_username,))
    result = cursor.fetchone()
    tasks = result[0] if result else ""

    updated_tasks = f"{tasks}\n- {task_text}"
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('''
    UPDATE Juns SET zadachi = ? WHERE user_jun = ?
    ''', (updated_tasks, jun_username))
    conn.commit()

    await message.answer(f"–ó–∞–¥–∞—á–∞ –¥–ª—è @{jun_username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    await state.clear()


async def get_juns_by_mentor(mentor_username: str) -> list:
    cursor.execute('''
    SELECT user_jun FROM Juns WHERE users_mentr = ?
    ''', (mentor_username,))
    juns = cursor.fetchall()
    return [jun[0] for jun in juns]

async def add_jun_ssilka(message: types.Message):
    unic_code = message.from_user.username.replace("@", "")
    back_btn = InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data='begin_mentor',
    )
    await message.answer(f"https://t.me/{bot_username}?start={unic_code}")
    markup = InlineKeyboardMarkup(inline_keyboard=[[back_btn]])
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∂—É–Ω–∞", reply_markup=markup)

# -------------------- –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥—ã---------------------
async def ground_of_team_mentor(message: types.Message):
    back_btn = InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data='begin_mentor',
    )
    await message.answer("–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥—ã", reply_markup=ReplyKeyboardRemove()) 
    markup = InlineKeyboardMarkup(inline_keyboard=[[back_btn]])
    await message.answer("–ö–∞–∫–æ–µ —Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥—ã", reply_markup=markup)
# -------------------- –ö–∞–∫–æ–π-—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥—ã---------------------

# --------------------–†–∞–±–æ—á–µ–µ –ø—Ä–æ-–≤–æ –º–µ–Ω—Ç—Ä–∞------------------------------
from random import randint
class CreateWorkspaceStates(StatesGroup):
    waiting_for_workspace_name = State()
    waiting_for_workspace_link = State()

async def workspace_mentor(message: types.Message): 
    back_btn = InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data='begin_mentor',
    )
    start_workspace_btn = InlineKeyboardButton(
        text="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É",
        callback_data='start_workspace',
    )
    keyboard = [[back_btn, start_workspace_btn]]
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.answer(welcome_mentor_message, reply_markup=markup)

async def start_workspace_handler(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:")
    await state.set_state(CreateWorkspaceStates.waiting_for_workspace_name)
    await callback_query.answer()

async def process_workspace_name(message: types.Message, state: FSMContext):
    workspace_name = message.text
    await state.update_data(workspace_name=workspace_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:")
    await state.set_state(CreateWorkspaceStates.waiting_for_workspace_link)

async def process_workspace_link(message: types.Message, state: FSMContext):
    workspace_link = message.text
    user_data = await state.get_data()
    workspace_name = user_data['workspace_name']
    workspace_code = randint(0,1000)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('''
    INSERT INTO workspace (workspace_name, workspace_ssilki, workspace_code) VALUES (?, ?, ?)
    ''', (workspace_name, workspace_link, workspace_code))
    conn.commit()

    await message.answer("–†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.")
    await message.answer(f"–ö–æ–¥ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {workspace_code}")
    await state.clear()

# --------------------–ö–æ–Ω–µ—Ü –ø—Ä–æ-–≤–∞ --------------------------------------


# –ö–æ–Ω–µ—Ü –ø—Ä-–≤–∞ –º–µ–Ω—Ç–æ—Ä–∞
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –î–∂—É–Ω–∞
async def handler_continue_callback_jun(callback_query: CallbackQuery):
    ground_of_command_btn = KeyboardButton(
        text="–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥—ã"
    )
    baza_znanie_btn = KeyboardButton(
        text="–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"
    )
    svyz_s_mentron_btn = KeyboardButton(
        text="–°–≤—è–∑—å —Å –º–µ–Ω—Ç–æ—Ä–æ–º"
    )
    my_profile_btn = KeyboardButton(
        text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
    )
    about_of_bot_btn = KeyboardButton(
        text="–û –±–æ—Ç–µ"
    )
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [ground_of_command_btn],
            [baza_znanie_btn],
            [svyz_s_mentron_btn],
            [my_profile_btn],
            [about_of_bot_btn]
        ],
        resize_keyboard=True
    )

    await callback_query.message.answer(ground_of_jun, reply_markup=markup)
    await callback_query.message.delete()
    await callback_query.answer()

async def handler_ground_of_command(message: types.Message):
    continue_btn = InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data='continue_jun',
    )
    await message.answer("–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥—ã", reply_markup=ReplyKeyboardRemove())
    markup = InlineKeyboardMarkup(inline_keyboard=[[continue_btn]])
    await message.answer("–ö–∞–∫–æ–µ —Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥—ã", reply_markup=markup)

async def handler_baza_znanie(message: types.Message):
    continue_btn = InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data='continue_jun',
    )
    await message.answer("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", reply_markup=ReplyKeyboardRemove())
    markup = InlineKeyboardMarkup(inline_keyboard=[[continue_btn]])
    await message.answer("–ö–∞–∫–∞—è- —Ç–æ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", reply_markup=markup)

async def handler_svyz_s_mentron(message: types.Message):
    continue_btn = InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data='continue_jun',
    )
    await message.answer("–°–≤—è–∑—å —Å –º–µ–Ω—Ç–æ—Ä–æ–º", reply_markup=ReplyKeyboardRemove())
    markup = InlineKeyboardMarkup(inline_keyboard=[[continue_btn]])
    await message.answer("–ß—Ç–æ —Ç–æ —Ç–∞–º", reply_markup=markup)

async def handler_my_profile(message: types.Message):
    continue_btn = InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data='continue_jun',
    )
    await message.answer("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=ReplyKeyboardRemove())
    markup = InlineKeyboardMarkup(inline_keyboard=[[continue_btn]])
    await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=markup)


async def handler_about_of_bot(message: types.Message):
    continue_btn = InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data='continue_jun',
    )
    await message.answer("–û –±–æ—Ç–µ", reply_markup=ReplyKeyboardRemove())
    markup = InlineKeyboardMarkup(inline_keyboard=[[continue_btn]])
    await message.answer(messafe_about_of_bot, reply_markup=markup)
    
# –ö–æ–Ω–µ—Ü –ø—Ä-–≤–∞ –¥–∂—É–Ω–∞
# ------------------------------------------------------------------------------



async def handler_start_callback(callback_query: CallbackQuery):
    await callback_query.message.delete()  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await handler_start(callback_query.message)

async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    logging.basicConfig(level=logging.INFO)
    dp.message.register(handler_start, CommandStart())
    # –ê–¥–º–∏–Ω—Å–∫–∞—è —á–∞—Å—Ç—å
    dp.message.register(add_mentr, Command("add_mentr"))
    dp.message.register(process_username, AddMentrStates.waiting_for_username)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
    dp.message.register(add_admin, Command("add_admin"))
    dp.message.register(process_admin_username, AddAdminStates.waiting_for_admin_username)
    dp.message.register(get_admins, Command("get_admins"))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –º–µ–Ω—Ç—Ä–∞
    dp.callback_query.register(handler_ment, lambda c: c.data == 'mentor')
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –¥–∂—É–Ω–∞
    dp.callback_query.register(handler_jun, lambda c: c.data == 'jun')
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    dp.callback_query.register(handler_start_callback, lambda c: c.data == 'start')
    
    # –ü—Ä–æ-–≤–æ –¥–∂—É–Ω–∞
    dp.callback_query.register(handler_continue_callback_jun, lambda c: c.data == 'continue_jun')
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä-–≤–∞ –∫–æ–º–∞–Ω–¥—ã
    dp.message.register(handler_ground_of_command, lambda message: message.text == "–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥—ã")
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    dp.message.register(handler_baza_znanie, lambda message: message.text == "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–≤—è–∑–∏ —Å –º–µ–Ω—Ç–æ—Ä–æ–º
    dp.message.register(handler_svyz_s_mentron, lambda message: message.text == "–°–≤—è–∑—å —Å –º–µ–Ω—Ç–æ—Ä–æ–º")
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    dp.message.register(handler_my_profile, lambda message: message.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ –±–æ—Ç–µ
    dp.message.register(handler_about_of_bot, lambda message: message.text == "–û –±–æ—Ç–µ")
    

    # –ü—Ä–æ-–≤–æ –º–µ–Ω—Ç–æ—Ä–∞
    dp.callback_query.register(handler_continue_callback_mentor, lambda c: c.data == 'continue_mentor')
    # –ü—Ä-–≤–æ –º–µ—Ç–Ω—Ç—Ä–∞
    dp.callback_query.register(handler_begin_mentor, lambda c: c.data == 'begin_mentor')
    # –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–∂—É–Ω–∞
    dp.message.register(add_jun_ssilka, lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –¥–∂—É–Ω–∞")
    # –î–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –¥–∂—É–Ω–æ–º
    dp.callback_query.register(jun_info_handler, lambda c: c.data.startswith('jun_info_'))
    dp.callback_query.register(view_progress_handler, lambda c: c.data.startswith('view_progress_'))
    dp.callback_query.register(view_tasks_handler, lambda c: c.data.startswith('view_tasks_'))  
    dp.callback_query.register(assign_task_handler, lambda c: c.data.startswith('assign_task_'))
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    dp.callback_query.register(assign_task_handler, lambda c: c.data.startswith('assign_task_'))
    dp.message.register(process_task_text, AssignTaskStates.waiting_for_task)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ –±–æ—Ç–µ –¥–ª—è –º–µ–Ω—Ç—Ä–∞
    dp.message.register(handler_about_of_bot2, lambda message: message.text == "–û –ë–æ—Ç–µ")
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –º–µ–Ω—Ç–æ—Ä–∞
    dp.message.register(handler_my_profile_mentor, lambda message: message.text == "–ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å")
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    dp.callback_query.register(edit_profile_handler, lambda c: c.data == 'edit_profile_mentor')
    dp.message.register(process_new_profile_text, EditProfileStates.waiting_for_new_profile_text)
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—Ç—Ä–∞
    #dp.callback_query.register(handler_edit_profile_mentor, lambda c: c.data == 'edit_profile_mentor')
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    dp.message.register(baza_znanie_mentor, lambda message: message.text == "–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ë–ó
    dp.callback_query.register(add_baza_znanie_handler, lambda c: c.data == 'add_baza_znanie')
    dp.message.register(process_baza_znanie_name, AddBazaZnanieStates.waiting_for_name)
    dp.message.register(process_baza_znanie_link, AddBazaZnanieStates.waiting_for_link)

    # –†–∞–±–æ—á–µ–µ –ø—Ä-–≤–æ
    dp.message.register(workspace_mentor, lambda message: message.text == "–†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ")
    dp.callback_query.register(start_workspace_handler, lambda c: c.data == 'start_workspace')
    dp.message.register(process_workspace_name, CreateWorkspaceStates.waiting_for_workspace_name)
    dp.message.register(process_workspace_link, CreateWorkspaceStates.waiting_for_workspace_link)
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–∂—É–Ω–æ–≤
    dp.message.register(juns_mentora, lambda message: message.text == "–ú–æ–∏ –¥–∂—É–Ω—ã")
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∫–æ–º–∞–Ω–¥—ã
    dp.message.register(ground_of_team_mentor, lambda message: message.text == "–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥—ã")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())